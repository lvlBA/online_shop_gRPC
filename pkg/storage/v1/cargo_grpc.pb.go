// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: cargo.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CargoServiceClient is the client API for CargoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CargoServiceClient interface {
	CreateCarrier(ctx context.Context, in *CreateCarrierRequest, opts ...grpc.CallOption) (*CreateCarrierResponse, error)
	GetCarrier(ctx context.Context, in *GetCarrierRequest, opts ...grpc.CallOption) (*GetCarrierResponse, error)
	DeleteCarrier(ctx context.Context, in *DeleteCarrierRequest, opts ...grpc.CallOption) (*DeleteCarrierResponse, error)
	ListCarriers(ctx context.Context, in *ListCarrierRequest, opts ...grpc.CallOption) (*ListCarrierResponse, error)
}

type cargoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCargoServiceClient(cc grpc.ClientConnInterface) CargoServiceClient {
	return &cargoServiceClient{cc}
}

func (c *cargoServiceClient) CreateCarrier(ctx context.Context, in *CreateCarrierRequest, opts ...grpc.CallOption) (*CreateCarrierResponse, error) {
	out := new(CreateCarrierResponse)
	err := c.cc.Invoke(ctx, "/online_shop.storage.v1.CargoService/CreateCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) GetCarrier(ctx context.Context, in *GetCarrierRequest, opts ...grpc.CallOption) (*GetCarrierResponse, error) {
	out := new(GetCarrierResponse)
	err := c.cc.Invoke(ctx, "/online_shop.storage.v1.CargoService/GetCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) DeleteCarrier(ctx context.Context, in *DeleteCarrierRequest, opts ...grpc.CallOption) (*DeleteCarrierResponse, error) {
	out := new(DeleteCarrierResponse)
	err := c.cc.Invoke(ctx, "/online_shop.storage.v1.CargoService/DeleteCarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cargoServiceClient) ListCarriers(ctx context.Context, in *ListCarrierRequest, opts ...grpc.CallOption) (*ListCarrierResponse, error) {
	out := new(ListCarrierResponse)
	err := c.cc.Invoke(ctx, "/online_shop.storage.v1.CargoService/ListCarriers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CargoServiceServer is the server API for CargoService service.
// All implementations must embed UnimplementedCargoServiceServer
// for forward compatibility
type CargoServiceServer interface {
	CreateCarrier(context.Context, *CreateCarrierRequest) (*CreateCarrierResponse, error)
	GetCarrier(context.Context, *GetCarrierRequest) (*GetCarrierResponse, error)
	DeleteCarrier(context.Context, *DeleteCarrierRequest) (*DeleteCarrierResponse, error)
	ListCarriers(context.Context, *ListCarrierRequest) (*ListCarrierResponse, error)
	mustEmbedUnimplementedCargoServiceServer()
}

// UnimplementedCargoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCargoServiceServer struct {
}

func (UnimplementedCargoServiceServer) CreateCarrier(context.Context, *CreateCarrierRequest) (*CreateCarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarrier not implemented")
}
func (UnimplementedCargoServiceServer) GetCarrier(context.Context, *GetCarrierRequest) (*GetCarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarrier not implemented")
}
func (UnimplementedCargoServiceServer) DeleteCarrier(context.Context, *DeleteCarrierRequest) (*DeleteCarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarrier not implemented")
}
func (UnimplementedCargoServiceServer) ListCarriers(context.Context, *ListCarrierRequest) (*ListCarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCarriers not implemented")
}
func (UnimplementedCargoServiceServer) mustEmbedUnimplementedCargoServiceServer() {}

// UnsafeCargoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CargoServiceServer will
// result in compilation errors.
type UnsafeCargoServiceServer interface {
	mustEmbedUnimplementedCargoServiceServer()
}

func RegisterCargoServiceServer(s grpc.ServiceRegistrar, srv CargoServiceServer) {
	s.RegisterService(&CargoService_ServiceDesc, srv)
}

func _CargoService_CreateCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).CreateCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.storage.v1.CargoService/CreateCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).CreateCarrier(ctx, req.(*CreateCarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_GetCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).GetCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.storage.v1.CargoService/GetCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).GetCarrier(ctx, req.(*GetCarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_DeleteCarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).DeleteCarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.storage.v1.CargoService/DeleteCarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).DeleteCarrier(ctx, req.(*DeleteCarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CargoService_ListCarriers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CargoServiceServer).ListCarriers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.storage.v1.CargoService/ListCarriers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CargoServiceServer).ListCarriers(ctx, req.(*ListCarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CargoService_ServiceDesc is the grpc.ServiceDesc for CargoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CargoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "online_shop.storage.v1.CargoService",
	HandlerType: (*CargoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCarrier",
			Handler:    _CargoService_CreateCarrier_Handler,
		},
		{
			MethodName: "GetCarrier",
			Handler:    _CargoService_GetCarrier_Handler,
		},
		{
			MethodName: "DeleteCarrier",
			Handler:    _CargoService_DeleteCarrier_Handler,
		},
		{
			MethodName: "ListCarriers",
			Handler:    _CargoService_ListCarriers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cargo.proto",
}
