// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: warehouse.proto

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error)
	GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*GetWarehouseResponse, error)
	DeleteWarehouse(ctx context.Context, in *DeleteWarehouseRequest, opts ...grpc.CallOption) (*DeleteWarehouseResponse, error)
	ListWarehouse(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) CreateWarehouse(ctx context.Context, in *CreateWarehouseRequest, opts ...grpc.CallOption) (*CreateWarehouseResponse, error) {
	out := new(CreateWarehouseResponse)
	err := c.cc.Invoke(ctx, "/online_shop.management.v1.WarehouseService/CreateWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetWarehouse(ctx context.Context, in *GetWarehouseRequest, opts ...grpc.CallOption) (*GetWarehouseResponse, error) {
	out := new(GetWarehouseResponse)
	err := c.cc.Invoke(ctx, "/online_shop.management.v1.WarehouseService/GetWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) DeleteWarehouse(ctx context.Context, in *DeleteWarehouseRequest, opts ...grpc.CallOption) (*DeleteWarehouseResponse, error) {
	out := new(DeleteWarehouseResponse)
	err := c.cc.Invoke(ctx, "/online_shop.management.v1.WarehouseService/DeleteWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) ListWarehouse(ctx context.Context, in *ListWarehousesRequest, opts ...grpc.CallOption) (*ListWarehousesResponse, error) {
	out := new(ListWarehousesResponse)
	err := c.cc.Invoke(ctx, "/online_shop.management.v1.WarehouseService/ListWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations must embed UnimplementedWarehouseServiceServer
// for forward compatibility
type WarehouseServiceServer interface {
	CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error)
	GetWarehouse(context.Context, *GetWarehouseRequest) (*GetWarehouseResponse, error)
	DeleteWarehouse(context.Context, *DeleteWarehouseRequest) (*DeleteWarehouseResponse, error)
	ListWarehouse(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error)
	mustEmbedUnimplementedWarehouseServiceServer()
}

// UnimplementedWarehouseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServiceServer struct {
}

func (UnimplementedWarehouseServiceServer) CreateWarehouse(context.Context, *CreateWarehouseRequest) (*CreateWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) GetWarehouse(context.Context, *GetWarehouseRequest) (*GetWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) DeleteWarehouse(context.Context, *DeleteWarehouseRequest) (*DeleteWarehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) ListWarehouse(context.Context, *ListWarehousesRequest) (*ListWarehousesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWarehouse not implemented")
}
func (UnimplementedWarehouseServiceServer) mustEmbedUnimplementedWarehouseServiceServer() {}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_CreateWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.management.v1.WarehouseService/CreateWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).CreateWarehouse(ctx, req.(*CreateWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.management.v1.WarehouseService/GetWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetWarehouse(ctx, req.(*GetWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_DeleteWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWarehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).DeleteWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.management.v1.WarehouseService/DeleteWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).DeleteWarehouse(ctx, req.(*DeleteWarehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_ListWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehousesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).ListWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/online_shop.management.v1.WarehouseService/ListWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).ListWarehouse(ctx, req.(*ListWarehousesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "online_shop.management.v1.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWarehouse",
			Handler:    _WarehouseService_CreateWarehouse_Handler,
		},
		{
			MethodName: "GetWarehouse",
			Handler:    _WarehouseService_GetWarehouse_Handler,
		},
		{
			MethodName: "DeleteWarehouse",
			Handler:    _WarehouseService_DeleteWarehouse_Handler,
		},
		{
			MethodName: "ListWarehouse",
			Handler:    _WarehouseService_ListWarehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse.proto",
}
